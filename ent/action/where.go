// Code generated by entc, DO NOT EDIT.

package action

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BradHacker/titan/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// ActionTypeEQ applies the EQ predicate on the "actionType" field.
func ActionTypeEQ(v ActionType) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionType), v))
	})
}

// ActionTypeNEQ applies the NEQ predicate on the "actionType" field.
func ActionTypeNEQ(v ActionType) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActionType), v))
	})
}

// ActionTypeIn applies the In predicate on the "actionType" field.
func ActionTypeIn(vs ...ActionType) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActionType), v...))
	})
}

// ActionTypeNotIn applies the NotIn predicate on the "actionType" field.
func ActionTypeNotIn(vs ...ActionType) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActionType), v...))
	})
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCmd), v))
	})
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCmd), v...))
	})
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCmd), v...))
	})
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCmd), v))
	})
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCmd), v))
	})
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCmd), v))
	})
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCmd), v))
	})
}

// CmdContains applies the Contains predicate on the "cmd" field.
func CmdContains(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCmd), v))
	})
}

// CmdHasPrefix applies the HasPrefix predicate on the "cmd" field.
func CmdHasPrefix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCmd), v))
	})
}

// CmdHasSuffix applies the HasSuffix predicate on the "cmd" field.
func CmdHasSuffix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCmd), v))
	})
}

// CmdEqualFold applies the EqualFold predicate on the "cmd" field.
func CmdEqualFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCmd), v))
	})
}

// CmdContainsFold applies the ContainsFold predicate on the "cmd" field.
func CmdContainsFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCmd), v))
	})
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutput), v))
	})
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutput), v...))
	})
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutput), v...))
	})
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutput), v))
	})
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutput), v))
	})
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutput), v))
	})
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutput), v))
	})
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutput), v))
	})
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutput), v))
	})
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutput), v))
	})
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOutput)))
	})
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOutput)))
	})
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutput), v))
	})
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutput), v))
	})
}

// HasInstruction applies the HasEdge predicate on the "instruction" edge.
func HasInstruction() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstructionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InstructionTable, InstructionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstructionWith applies the HasEdge predicate on the "instruction" edge with a given conditions (other predicates).
func HasInstructionWith(preds ...predicate.Instruction) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstructionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InstructionTable, InstructionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		p(s.Not())
	})
}
