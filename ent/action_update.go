// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/titan/ent/action"
	"github.com/BradHacker/titan/ent/instruction"
	"github.com/BradHacker/titan/ent/predicate"
)

// ActionUpdate is the builder for updating Action entities.
type ActionUpdate struct {
	config
	hooks    []Hook
	mutation *ActionMutation
}

// Where adds a new predicate for the ActionUpdate builder.
func (au *ActionUpdate) Where(ps ...predicate.Action) *ActionUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetActionType sets the "actionType" field.
func (au *ActionUpdate) SetActionType(at action.ActionType) *ActionUpdate {
	au.mutation.SetActionType(at)
	return au
}

// SetCmd sets the "cmd" field.
func (au *ActionUpdate) SetCmd(s string) *ActionUpdate {
	au.mutation.SetCmd(s)
	return au
}

// SetArgs sets the "args" field.
func (au *ActionUpdate) SetArgs(s []string) *ActionUpdate {
	au.mutation.SetArgs(s)
	return au
}

// SetOutput sets the "output" field.
func (au *ActionUpdate) SetOutput(s string) *ActionUpdate {
	au.mutation.SetOutput(s)
	return au
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (au *ActionUpdate) SetNillableOutput(s *string) *ActionUpdate {
	if s != nil {
		au.SetOutput(*s)
	}
	return au
}

// ClearOutput clears the value of the "output" field.
func (au *ActionUpdate) ClearOutput() *ActionUpdate {
	au.mutation.ClearOutput()
	return au
}

// SetInstructionID sets the "instruction" edge to the Instruction entity by ID.
func (au *ActionUpdate) SetInstructionID(id int) *ActionUpdate {
	au.mutation.SetInstructionID(id)
	return au
}

// SetNillableInstructionID sets the "instruction" edge to the Instruction entity by ID if the given value is not nil.
func (au *ActionUpdate) SetNillableInstructionID(id *int) *ActionUpdate {
	if id != nil {
		au = au.SetInstructionID(*id)
	}
	return au
}

// SetInstruction sets the "instruction" edge to the Instruction entity.
func (au *ActionUpdate) SetInstruction(i *Instruction) *ActionUpdate {
	return au.SetInstructionID(i.ID)
}

// Mutation returns the ActionMutation object of the builder.
func (au *ActionUpdate) Mutation() *ActionMutation {
	return au.mutation
}

// ClearInstruction clears the "instruction" edge to the Instruction entity.
func (au *ActionUpdate) ClearInstruction() *ActionUpdate {
	au.mutation.ClearInstruction()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActionUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActionUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActionUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActionUpdate) check() error {
	if v, ok := au.mutation.ActionType(); ok {
		if err := action.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "actionType", err: fmt.Errorf("ent: validator failed for field \"actionType\": %w", err)}
		}
	}
	return nil
}

func (au *ActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   action.Table,
			Columns: action.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: action.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: action.FieldActionType,
		})
	}
	if value, ok := au.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldCmd,
		})
	}
	if value, ok := au.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: action.FieldArgs,
		})
	}
	if value, ok := au.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldOutput,
		})
	}
	if au.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: action.FieldOutput,
		})
	}
	if au.mutation.InstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   action.InstructionTable,
			Columns: []string{action.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   action.InstructionTable,
			Columns: []string{action.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{action.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActionUpdateOne is the builder for updating a single Action entity.
type ActionUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActionMutation
}

// SetActionType sets the "actionType" field.
func (auo *ActionUpdateOne) SetActionType(at action.ActionType) *ActionUpdateOne {
	auo.mutation.SetActionType(at)
	return auo
}

// SetCmd sets the "cmd" field.
func (auo *ActionUpdateOne) SetCmd(s string) *ActionUpdateOne {
	auo.mutation.SetCmd(s)
	return auo
}

// SetArgs sets the "args" field.
func (auo *ActionUpdateOne) SetArgs(s []string) *ActionUpdateOne {
	auo.mutation.SetArgs(s)
	return auo
}

// SetOutput sets the "output" field.
func (auo *ActionUpdateOne) SetOutput(s string) *ActionUpdateOne {
	auo.mutation.SetOutput(s)
	return auo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (auo *ActionUpdateOne) SetNillableOutput(s *string) *ActionUpdateOne {
	if s != nil {
		auo.SetOutput(*s)
	}
	return auo
}

// ClearOutput clears the value of the "output" field.
func (auo *ActionUpdateOne) ClearOutput() *ActionUpdateOne {
	auo.mutation.ClearOutput()
	return auo
}

// SetInstructionID sets the "instruction" edge to the Instruction entity by ID.
func (auo *ActionUpdateOne) SetInstructionID(id int) *ActionUpdateOne {
	auo.mutation.SetInstructionID(id)
	return auo
}

// SetNillableInstructionID sets the "instruction" edge to the Instruction entity by ID if the given value is not nil.
func (auo *ActionUpdateOne) SetNillableInstructionID(id *int) *ActionUpdateOne {
	if id != nil {
		auo = auo.SetInstructionID(*id)
	}
	return auo
}

// SetInstruction sets the "instruction" edge to the Instruction entity.
func (auo *ActionUpdateOne) SetInstruction(i *Instruction) *ActionUpdateOne {
	return auo.SetInstructionID(i.ID)
}

// Mutation returns the ActionMutation object of the builder.
func (auo *ActionUpdateOne) Mutation() *ActionMutation {
	return auo.mutation
}

// ClearInstruction clears the "instruction" edge to the Instruction entity.
func (auo *ActionUpdateOne) ClearInstruction() *ActionUpdateOne {
	auo.mutation.ClearInstruction()
	return auo
}

// Save executes the query and returns the updated Action entity.
func (auo *ActionUpdateOne) Save(ctx context.Context) (*Action, error) {
	var (
		err  error
		node *Action
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActionUpdateOne) SaveX(ctx context.Context) *Action {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActionUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActionUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActionUpdateOne) check() error {
	if v, ok := auo.mutation.ActionType(); ok {
		if err := action.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "actionType", err: fmt.Errorf("ent: validator failed for field \"actionType\": %w", err)}
		}
	}
	return nil
}

func (auo *ActionUpdateOne) sqlSave(ctx context.Context) (_node *Action, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   action.Table,
			Columns: action.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: action.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Action.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: action.FieldActionType,
		})
	}
	if value, ok := auo.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldCmd,
		})
	}
	if value, ok := auo.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: action.FieldArgs,
		})
	}
	if value, ok := auo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldOutput,
		})
	}
	if auo.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: action.FieldOutput,
		})
	}
	if auo.mutation.InstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   action.InstructionTable,
			Columns: []string{action.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   action.InstructionTable,
			Columns: []string{action.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Action{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{action.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
