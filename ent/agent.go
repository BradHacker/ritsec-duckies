// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/titan/ent/agent"
	"github.com/BradHacker/titan/ent/instruction"
)

// Agent is the model entity for the Agent schema.
type Agent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Port holds the value of the "port" field.
	Port string `json:"port,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid int `json:"pid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentQuery when eager-loading is set.
	Edges             AgentEdges `json:"edges"`
	instruction_agent *int
}

// AgentEdges holds the relations/edges for other nodes in the graph.
type AgentEdges struct {
	// Instruction holds the value of the instruction edge.
	Instruction *Instruction `json:"instruction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstructionOrErr returns the Instruction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentEdges) InstructionOrErr() (*Instruction, error) {
	if e.loadedTypes[0] {
		if e.Instruction == nil {
			// The edge instruction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: instruction.Label}
		}
		return e.Instruction, nil
	}
	return nil, &NotLoadedError{edge: "instruction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case agent.FieldID, agent.FieldPid:
			values[i] = &sql.NullInt64{}
		case agent.FieldUUID, agent.FieldHostname, agent.FieldIP, agent.FieldPort:
			values[i] = &sql.NullString{}
		case agent.ForeignKeys[0]: // instruction_agent
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Agent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agent fields.
func (a *Agent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case agent.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				a.UUID = value.String
			}
		case agent.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				a.Hostname = value.String
			}
		case agent.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				a.IP = value.String
			}
		case agent.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				a.Port = value.String
			}
		case agent.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				a.Pid = int(value.Int64)
			}
		case agent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instruction_agent", value)
			} else if value.Valid {
				a.instruction_agent = new(int)
				*a.instruction_agent = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryInstruction queries the "instruction" edge of the Agent entity.
func (a *Agent) QueryInstruction() *InstructionQuery {
	return (&AgentClient{config: a.config}).QueryInstruction(a)
}

// Update returns a builder for updating this Agent.
// Note that you need to call Agent.Unwrap() before calling this method if this Agent
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agent) Update() *AgentUpdateOne {
	return (&AgentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Agent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agent) Unwrap() *Agent {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agent is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agent) String() string {
	var builder strings.Builder
	builder.WriteString("Agent(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(a.UUID)
	builder.WriteString(", hostname=")
	builder.WriteString(a.Hostname)
	builder.WriteString(", ip=")
	builder.WriteString(a.IP)
	builder.WriteString(", port=")
	builder.WriteString(a.Port)
	builder.WriteString(", pid=")
	builder.WriteString(fmt.Sprintf("%v", a.Pid))
	builder.WriteByte(')')
	return builder.String()
}

// Agents is a parsable slice of Agent.
type Agents []*Agent

func (a Agents) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
