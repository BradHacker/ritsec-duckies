// Code generated by entc, DO NOT EDIT.

package agent

const (
	// Label holds the string label denoting the agent type in the database.
	Label = "agent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// EdgeInstruction holds the string denoting the instruction edge name in mutations.
	EdgeInstruction = "instruction"
	// Table holds the table name of the agent in the database.
	Table = "agents"
	// InstructionTable is the table the holds the instruction relation/edge.
	InstructionTable = "agents"
	// InstructionInverseTable is the table name for the Instruction entity.
	// It exists in this package in order to avoid circular dependency with the "instruction" package.
	InstructionInverseTable = "instructions"
	// InstructionColumn is the table column denoting the instruction relation/edge.
	InstructionColumn = "instruction_agent"
)

// Columns holds all SQL columns for agent fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldHostname,
	FieldIP,
	FieldPort,
	FieldPid,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "agents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"instruction_agent",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
