// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/titan/ent/beacon"
	"github.com/BradHacker/titan/ent/instruction"
)

// Beacon is the model entity for the Beacon schema.
type Beacon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// ReceivedAt holds the value of the "receivedAt" field.
	ReceivedAt *time.Time `json:"receivedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BeaconQuery when eager-loading is set.
	Edges BeaconEdges `json:"edges"`
}

// BeaconEdges holds the relations/edges for other nodes in the graph.
type BeaconEdges struct {
	// Instruction holds the value of the instruction edge.
	Instruction *Instruction `json:"instruction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstructionOrErr returns the Instruction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BeaconEdges) InstructionOrErr() (*Instruction, error) {
	if e.loadedTypes[0] {
		if e.Instruction == nil {
			// The edge instruction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: instruction.Label}
		}
		return e.Instruction, nil
	}
	return nil, &NotLoadedError{edge: "instruction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Beacon) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case beacon.FieldID:
			values[i] = &sql.NullInt64{}
		case beacon.FieldSentAt, beacon.FieldReceivedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Beacon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Beacon fields.
func (b *Beacon) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case beacon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case beacon.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[i])
			} else if value.Valid {
				b.SentAt = value.Time
			}
		case beacon.FieldReceivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field receivedAt", values[i])
			} else if value.Valid {
				b.ReceivedAt = new(time.Time)
				*b.ReceivedAt = value.Time
			}
		}
	}
	return nil
}

// QueryInstruction queries the "instruction" edge of the Beacon entity.
func (b *Beacon) QueryInstruction() *InstructionQuery {
	return (&BeaconClient{config: b.config}).QueryInstruction(b)
}

// Update returns a builder for updating this Beacon.
// Note that you need to call Beacon.Unwrap() before calling this method if this Beacon
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Beacon) Update() *BeaconUpdateOne {
	return (&BeaconClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Beacon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Beacon) Unwrap() *Beacon {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Beacon is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Beacon) String() string {
	var builder strings.Builder
	builder.WriteString("Beacon(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", sentAt=")
	builder.WriteString(b.SentAt.Format(time.ANSIC))
	if v := b.ReceivedAt; v != nil {
		builder.WriteString(", receivedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Beacons is a parsable slice of Beacon.
type Beacons []*Beacon

func (b Beacons) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
