// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/titan/ent/beacon"
	"github.com/BradHacker/titan/ent/instruction"
	"github.com/BradHacker/titan/ent/predicate"
)

// BeaconUpdate is the builder for updating Beacon entities.
type BeaconUpdate struct {
	config
	hooks    []Hook
	mutation *BeaconMutation
}

// Where adds a new predicate for the BeaconUpdate builder.
func (bu *BeaconUpdate) Where(ps ...predicate.Beacon) *BeaconUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetSentAt sets the "sentAt" field.
func (bu *BeaconUpdate) SetSentAt(t time.Time) *BeaconUpdate {
	bu.mutation.SetSentAt(t)
	return bu
}

// SetReceivedAt sets the "receivedAt" field.
func (bu *BeaconUpdate) SetReceivedAt(t time.Time) *BeaconUpdate {
	bu.mutation.SetReceivedAt(t)
	return bu
}

// SetNillableReceivedAt sets the "receivedAt" field if the given value is not nil.
func (bu *BeaconUpdate) SetNillableReceivedAt(t *time.Time) *BeaconUpdate {
	if t != nil {
		bu.SetReceivedAt(*t)
	}
	return bu
}

// ClearReceivedAt clears the value of the "receivedAt" field.
func (bu *BeaconUpdate) ClearReceivedAt() *BeaconUpdate {
	bu.mutation.ClearReceivedAt()
	return bu
}

// SetInstructionID sets the "instruction" edge to the Instruction entity by ID.
func (bu *BeaconUpdate) SetInstructionID(id int) *BeaconUpdate {
	bu.mutation.SetInstructionID(id)
	return bu
}

// SetInstruction sets the "instruction" edge to the Instruction entity.
func (bu *BeaconUpdate) SetInstruction(i *Instruction) *BeaconUpdate {
	return bu.SetInstructionID(i.ID)
}

// Mutation returns the BeaconMutation object of the builder.
func (bu *BeaconUpdate) Mutation() *BeaconMutation {
	return bu.mutation
}

// ClearInstruction clears the "instruction" edge to the Instruction entity.
func (bu *BeaconUpdate) ClearInstruction() *BeaconUpdate {
	bu.mutation.ClearInstruction()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BeaconUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BeaconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BeaconUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BeaconUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BeaconUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BeaconUpdate) check() error {
	if _, ok := bu.mutation.InstructionID(); bu.mutation.InstructionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"instruction\"")
	}
	return nil
}

func (bu *BeaconUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   beacon.Table,
			Columns: beacon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: beacon.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: beacon.FieldSentAt,
		})
	}
	if value, ok := bu.mutation.ReceivedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: beacon.FieldReceivedAt,
		})
	}
	if bu.mutation.ReceivedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: beacon.FieldReceivedAt,
		})
	}
	if bu.mutation.InstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   beacon.InstructionTable,
			Columns: []string{beacon.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.InstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   beacon.InstructionTable,
			Columns: []string{beacon.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{beacon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BeaconUpdateOne is the builder for updating a single Beacon entity.
type BeaconUpdateOne struct {
	config
	hooks    []Hook
	mutation *BeaconMutation
}

// SetSentAt sets the "sentAt" field.
func (buo *BeaconUpdateOne) SetSentAt(t time.Time) *BeaconUpdateOne {
	buo.mutation.SetSentAt(t)
	return buo
}

// SetReceivedAt sets the "receivedAt" field.
func (buo *BeaconUpdateOne) SetReceivedAt(t time.Time) *BeaconUpdateOne {
	buo.mutation.SetReceivedAt(t)
	return buo
}

// SetNillableReceivedAt sets the "receivedAt" field if the given value is not nil.
func (buo *BeaconUpdateOne) SetNillableReceivedAt(t *time.Time) *BeaconUpdateOne {
	if t != nil {
		buo.SetReceivedAt(*t)
	}
	return buo
}

// ClearReceivedAt clears the value of the "receivedAt" field.
func (buo *BeaconUpdateOne) ClearReceivedAt() *BeaconUpdateOne {
	buo.mutation.ClearReceivedAt()
	return buo
}

// SetInstructionID sets the "instruction" edge to the Instruction entity by ID.
func (buo *BeaconUpdateOne) SetInstructionID(id int) *BeaconUpdateOne {
	buo.mutation.SetInstructionID(id)
	return buo
}

// SetInstruction sets the "instruction" edge to the Instruction entity.
func (buo *BeaconUpdateOne) SetInstruction(i *Instruction) *BeaconUpdateOne {
	return buo.SetInstructionID(i.ID)
}

// Mutation returns the BeaconMutation object of the builder.
func (buo *BeaconUpdateOne) Mutation() *BeaconMutation {
	return buo.mutation
}

// ClearInstruction clears the "instruction" edge to the Instruction entity.
func (buo *BeaconUpdateOne) ClearInstruction() *BeaconUpdateOne {
	buo.mutation.ClearInstruction()
	return buo
}

// Save executes the query and returns the updated Beacon entity.
func (buo *BeaconUpdateOne) Save(ctx context.Context) (*Beacon, error) {
	var (
		err  error
		node *Beacon
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BeaconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BeaconUpdateOne) SaveX(ctx context.Context) *Beacon {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BeaconUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BeaconUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BeaconUpdateOne) check() error {
	if _, ok := buo.mutation.InstructionID(); buo.mutation.InstructionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"instruction\"")
	}
	return nil
}

func (buo *BeaconUpdateOne) sqlSave(ctx context.Context) (_node *Beacon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   beacon.Table,
			Columns: beacon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: beacon.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Beacon.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: beacon.FieldSentAt,
		})
	}
	if value, ok := buo.mutation.ReceivedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: beacon.FieldReceivedAt,
		})
	}
	if buo.mutation.ReceivedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: beacon.FieldReceivedAt,
		})
	}
	if buo.mutation.InstructionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   beacon.InstructionTable,
			Columns: []string{beacon.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.InstructionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   beacon.InstructionTable,
			Columns: []string{beacon.InstructionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instruction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Beacon{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{beacon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
