// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/titan/ent/agent"
	"github.com/BradHacker/titan/ent/heartbeat"
)

// Heartbeat is the model entity for the Heartbeat schema.
type Heartbeat struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// ReceivedAt holds the value of the "receivedAt" field.
	ReceivedAt time.Time `json:"receivedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeartbeatQuery when eager-loading is set.
	Edges           HeartbeatEdges `json:"edges"`
	heartbeat_agent *int
}

// HeartbeatEdges holds the relations/edges for other nodes in the graph.
type HeartbeatEdges struct {
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HeartbeatEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[0] {
		if e.Agent == nil {
			// The edge agent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Heartbeat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case heartbeat.FieldID:
			values[i] = &sql.NullInt64{}
		case heartbeat.FieldSentAt, heartbeat.FieldReceivedAt:
			values[i] = &sql.NullTime{}
		case heartbeat.ForeignKeys[0]: // heartbeat_agent
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Heartbeat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Heartbeat fields.
func (h *Heartbeat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case heartbeat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case heartbeat.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[i])
			} else if value.Valid {
				h.SentAt = value.Time
			}
		case heartbeat.FieldReceivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field receivedAt", values[i])
			} else if value.Valid {
				h.ReceivedAt = value.Time
			}
		case heartbeat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field heartbeat_agent", value)
			} else if value.Valid {
				h.heartbeat_agent = new(int)
				*h.heartbeat_agent = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAgent queries the "agent" edge of the Heartbeat entity.
func (h *Heartbeat) QueryAgent() *AgentQuery {
	return (&HeartbeatClient{config: h.config}).QueryAgent(h)
}

// Update returns a builder for updating this Heartbeat.
// Note that you need to call Heartbeat.Unwrap() before calling this method if this Heartbeat
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Heartbeat) Update() *HeartbeatUpdateOne {
	return (&HeartbeatClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Heartbeat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Heartbeat) Unwrap() *Heartbeat {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Heartbeat is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Heartbeat) String() string {
	var builder strings.Builder
	builder.WriteString("Heartbeat(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", sentAt=")
	builder.WriteString(h.SentAt.Format(time.ANSIC))
	builder.WriteString(", receivedAt=")
	builder.WriteString(h.ReceivedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Heartbeats is a parsable slice of Heartbeat.
type Heartbeats []*Heartbeat

func (h Heartbeats) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
