// Code generated by entc, DO NOT EDIT.

package heartbeat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BradHacker/titan/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SentAt applies equality check predicate on the "sentAt" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentAt), v))
	})
}

// ReceivedAt applies equality check predicate on the "receivedAt" field. It's identical to ReceivedAtEQ.
func ReceivedAt(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivedAt), v))
	})
}

// SentAtEQ applies the EQ predicate on the "sentAt" field.
func SentAtEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentAt), v))
	})
}

// SentAtNEQ applies the NEQ predicate on the "sentAt" field.
func SentAtNEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSentAt), v))
	})
}

// SentAtIn applies the In predicate on the "sentAt" field.
func SentAtIn(vs ...time.Time) predicate.Heartbeat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSentAt), v...))
	})
}

// SentAtNotIn applies the NotIn predicate on the "sentAt" field.
func SentAtNotIn(vs ...time.Time) predicate.Heartbeat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSentAt), v...))
	})
}

// SentAtGT applies the GT predicate on the "sentAt" field.
func SentAtGT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSentAt), v))
	})
}

// SentAtGTE applies the GTE predicate on the "sentAt" field.
func SentAtGTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSentAt), v))
	})
}

// SentAtLT applies the LT predicate on the "sentAt" field.
func SentAtLT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSentAt), v))
	})
}

// SentAtLTE applies the LTE predicate on the "sentAt" field.
func SentAtLTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSentAt), v))
	})
}

// ReceivedAtEQ applies the EQ predicate on the "receivedAt" field.
func ReceivedAtEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivedAt), v))
	})
}

// ReceivedAtNEQ applies the NEQ predicate on the "receivedAt" field.
func ReceivedAtNEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceivedAt), v))
	})
}

// ReceivedAtIn applies the In predicate on the "receivedAt" field.
func ReceivedAtIn(vs ...time.Time) predicate.Heartbeat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceivedAt), v...))
	})
}

// ReceivedAtNotIn applies the NotIn predicate on the "receivedAt" field.
func ReceivedAtNotIn(vs ...time.Time) predicate.Heartbeat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Heartbeat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceivedAt), v...))
	})
}

// ReceivedAtGT applies the GT predicate on the "receivedAt" field.
func ReceivedAtGT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceivedAt), v))
	})
}

// ReceivedAtGTE applies the GTE predicate on the "receivedAt" field.
func ReceivedAtGTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceivedAt), v))
	})
}

// ReceivedAtLT applies the LT predicate on the "receivedAt" field.
func ReceivedAtLT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceivedAt), v))
	})
}

// ReceivedAtLTE applies the LTE predicate on the "receivedAt" field.
func ReceivedAtLTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceivedAt), v))
	})
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		p(s.Not())
	})
}
