// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/titan/ent/action"
	"github.com/BradHacker/titan/ent/agent"
	"github.com/BradHacker/titan/ent/beacon"
	"github.com/BradHacker/titan/ent/instruction"
)

// Instruction is the model entity for the Instruction schema.
type Instruction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstructionQuery when eager-loading is set.
	Edges              InstructionEdges `json:"edges"`
	beacon_instruction *int
	instruction_agent  *int
}

// InstructionEdges holds the relations/edges for other nodes in the graph.
type InstructionEdges struct {
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Action holds the value of the action edge.
	Action *Action `json:"action,omitempty"`
	// Beacon holds the value of the beacon edge.
	Beacon *Beacon `json:"beacon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstructionEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[0] {
		if e.Agent == nil {
			// The edge agent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstructionEdges) ActionOrErr() (*Action, error) {
	if e.loadedTypes[1] {
		if e.Action == nil {
			// The edge action was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: action.Label}
		}
		return e.Action, nil
	}
	return nil, &NotLoadedError{edge: "action"}
}

// BeaconOrErr returns the Beacon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstructionEdges) BeaconOrErr() (*Beacon, error) {
	if e.loadedTypes[2] {
		if e.Beacon == nil {
			// The edge beacon was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: beacon.Label}
		}
		return e.Beacon, nil
	}
	return nil, &NotLoadedError{edge: "beacon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instruction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case instruction.FieldID:
			values[i] = &sql.NullInt64{}
		case instruction.FieldSentAt:
			values[i] = &sql.NullTime{}
		case instruction.ForeignKeys[0]: // beacon_instruction
			values[i] = &sql.NullInt64{}
		case instruction.ForeignKeys[1]: // instruction_agent
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Instruction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instruction fields.
func (i *Instruction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instruction.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case instruction.FieldSentAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[j])
			} else if value.Valid {
				i.SentAt = value.Time
			}
		case instruction.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field beacon_instruction", value)
			} else if value.Valid {
				i.beacon_instruction = new(int)
				*i.beacon_instruction = int(value.Int64)
			}
		case instruction.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instruction_agent", value)
			} else if value.Valid {
				i.instruction_agent = new(int)
				*i.instruction_agent = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAgent queries the "agent" edge of the Instruction entity.
func (i *Instruction) QueryAgent() *AgentQuery {
	return (&InstructionClient{config: i.config}).QueryAgent(i)
}

// QueryAction queries the "action" edge of the Instruction entity.
func (i *Instruction) QueryAction() *ActionQuery {
	return (&InstructionClient{config: i.config}).QueryAction(i)
}

// QueryBeacon queries the "beacon" edge of the Instruction entity.
func (i *Instruction) QueryBeacon() *BeaconQuery {
	return (&InstructionClient{config: i.config}).QueryBeacon(i)
}

// Update returns a builder for updating this Instruction.
// Note that you need to call Instruction.Unwrap() before calling this method if this Instruction
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instruction) Update() *InstructionUpdateOne {
	return (&InstructionClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Instruction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instruction) Unwrap() *Instruction {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instruction is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instruction) String() string {
	var builder strings.Builder
	builder.WriteString("Instruction(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", sentAt=")
	builder.WriteString(i.SentAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Instructions is a parsable slice of Instruction.
type Instructions []*Instruction

func (i Instructions) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
