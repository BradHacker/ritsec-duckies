// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActionsColumns holds the columns for the "actions" table.
	ActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action_type", Type: field.TypeEnum, Enums: []string{"EXEC"}},
		{Name: "cmd", Type: field.TypeString},
		{Name: "args", Type: field.TypeJSON},
		{Name: "output", Type: field.TypeString, Nullable: true},
		{Name: "instruction_action", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// ActionsTable holds the schema information for the "actions" table.
	ActionsTable = &schema.Table{
		Name:       "actions",
		Columns:    ActionsColumns,
		PrimaryKey: []*schema.Column{ActionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "actions_instructions_action",
				Columns:    []*schema.Column{ActionsColumns[5]},
				RefColumns: []*schema.Column{InstructionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AgentsColumns holds the columns for the "agents" table.
	AgentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "ip", Type: field.TypeString},
		{Name: "port", Type: field.TypeString},
		{Name: "pid", Type: field.TypeInt},
	}
	// AgentsTable holds the schema information for the "agents" table.
	AgentsTable = &schema.Table{
		Name:        "agents",
		Columns:     AgentsColumns,
		PrimaryKey:  []*schema.Column{AgentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// BeaconsColumns holds the columns for the "beacons" table.
	BeaconsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sent_at", Type: field.TypeTime},
		{Name: "received_at", Type: field.TypeTime, Nullable: true},
	}
	// BeaconsTable holds the schema information for the "beacons" table.
	BeaconsTable = &schema.Table{
		Name:        "beacons",
		Columns:     BeaconsColumns,
		PrimaryKey:  []*schema.Column{BeaconsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// HeartbeatsColumns holds the columns for the "heartbeats" table.
	HeartbeatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sent_at", Type: field.TypeTime},
		{Name: "received_at", Type: field.TypeTime},
		{Name: "heartbeat_agent", Type: field.TypeInt, Nullable: true},
	}
	// HeartbeatsTable holds the schema information for the "heartbeats" table.
	HeartbeatsTable = &schema.Table{
		Name:       "heartbeats",
		Columns:    HeartbeatsColumns,
		PrimaryKey: []*schema.Column{HeartbeatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "heartbeats_agents_agent",
				Columns:    []*schema.Column{HeartbeatsColumns[3]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InstructionsColumns holds the columns for the "instructions" table.
	InstructionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sent_at", Type: field.TypeTime},
		{Name: "beacon_instruction", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "instruction_agent", Type: field.TypeInt, Nullable: true},
	}
	// InstructionsTable holds the schema information for the "instructions" table.
	InstructionsTable = &schema.Table{
		Name:       "instructions",
		Columns:    InstructionsColumns,
		PrimaryKey: []*schema.Column{InstructionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "instructions_beacons_instruction",
				Columns:    []*schema.Column{InstructionsColumns[2]},
				RefColumns: []*schema.Column{BeaconsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "instructions_agents_agent",
				Columns:    []*schema.Column{InstructionsColumns[3]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActionsTable,
		AgentsTable,
		BeaconsTable,
		HeartbeatsTable,
		InstructionsTable,
	}
)

func init() {
	ActionsTable.ForeignKeys[0].RefTable = InstructionsTable
	HeartbeatsTable.ForeignKeys[0].RefTable = AgentsTable
	InstructionsTable.ForeignKeys[0].RefTable = BeaconsTable
	InstructionsTable.ForeignKeys[1].RefTable = AgentsTable
}
